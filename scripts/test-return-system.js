/**
 * üß™ SCRIPT DE TEST - SYST√àME DE RETOUR COMPLET
 * 
 * Teste le nouveau syst√®me de retour pour les factures d'avoir
 */

const testReturnSystem = async () => {
  console.log('üß™ === TEST SYST√àME DE RETOUR COMPLET ===\n')

  try {
    // 1. Cr√©er une facture d'avoir avec diff√©rents types de retours
    console.log('üìù 1. Cr√©ation facture d\'avoir avec retours mixtes...')
    
    const creditNoteData = {
      type: 'CREDIT_NOTE',
      invoiceNumber: 'FAV-TEST-001',
      customerName: 'Client Test Retour',
      customerPhone: '0612345678',
      customerEmail: 'test@retour.com',
      subtotal: 300,
      discountAmount: 0,
      taxRate: 20,
      taxAmount: 60,
      total: -360, // N√©gatif pour facture d'avoir
      notes: 'Test syst√®me de retour complet',
      items: [
        {
          productId: 'cmgo9qb2y0009pa01wzyr4jk2', // Produit existant
          productName: 'Produit Bon √âtat',
          productSku: 'TEST-001',
          description: 'Retour en bon √©tat',
          quantity: 2,
          unitPrice: 50,
          discountAmount: 0,
          total: 100,
          returnStatus: 'GOOD',
          returnReason: 'Client satisfait, retour normal'
        },
        {
          productId: 'cmgo9qb2y0009pa01wzyr4jk2', // M√™me produit
          productName: 'Produit D√©fectueux',
          productSku: 'TEST-002',
          description: 'Retour d√©fectueux',
          quantity: 1,
          unitPrice: 100,
          discountAmount: 0,
          total: 100,
          returnStatus: 'DEFECTIVE',
          returnReason: 'Rayure sur le produit'
        },
        {
          productId: 'cmgo9qb2y0009pa01wzyr4jk2', // M√™me produit
          productName: 'Produit Inutilisable',
          productSku: 'TEST-003',
          description: 'Retour inutilisable',
          quantity: 1,
          unitPrice: 100,
          discountAmount: 0,
          total: 100,
          returnStatus: 'UNUSABLE',
          returnReason: 'Produit cass√© irr√©parable'
        }
      ]
    }

    const response = await fetch('http://localhost:3000/api/invoices', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'Cookie': 'session=test-session' // Simuler une session
      },
      body: JSON.stringify(creditNoteData)
    })

    if (!response.ok) {
      const error = await response.json()
      console.error('‚ùå Erreur cr√©ation facture:', error)
      return
    }

    const invoice = await response.json()
    console.log('‚úÖ Facture d\'avoir cr√©√©e:', invoice.invoiceNumber)
    console.log('üì¶ Articles avec retours:', invoice.items?.length || 0)
    console.log('üîÑ Retours trait√©s:', invoice.productReturns?.length || 0)

    // 2. V√©rifier les retours cr√©√©s
    console.log('\nüìä 2. V√©rification des retours...')
    
    const returnsResponse = await fetch(`http://localhost:3000/api/product-returns?invoiceId=${invoice.id}`, {
      headers: {
        'Cookie': 'session=test-session'
      }
    })

    if (returnsResponse.ok) {
      const returnsData = await returnsResponse.json()
      console.log('‚úÖ Retours r√©cup√©r√©s:', returnsData.returns?.length || 0)
      
      returnsData.returns?.forEach((ret, index) => {
        console.log(`   ${index + 1}. ${ret.returnStatus}: ${ret.quantity}x ${ret.product?.name}`)
        console.log(`      Stock vendable: ${ret.product?.stock}`)
        console.log(`      Stock d√©fectueux: ${ret.product?.defectiveStock}`)
        console.log(`      Quantit√© restock√©e: ${ret.restockedQuantity}`)
        if (ret.reason) console.log(`      Raison: ${ret.reason}`)
        console.log('')
      })
    }

    // 3. V√©rifier l'impact sur le stock du produit
    console.log('üìà 3. V√©rification impact stock...')
    
    const productResponse = await fetch(`http://localhost:3000/api/products/cmgo9qb2y0009pa01wzyr4jk2`, {
      headers: {
        'Cookie': 'session=test-session'
      }
    })

    if (productResponse.ok) {
      const product = await productResponse.json()
      console.log('‚úÖ √âtat du stock apr√®s retours:')
      console.log(`   Stock vendable: ${product.stock}`)
      console.log(`   Stock d√©fectueux: ${product.defectiveStock}`)
      console.log(`   Stock total: ${product.stock + product.defectiveStock}`)
    }

    // 4. Test de validation des retours
    console.log('\nüîç 4. Test validation retours...')
    
    const invalidReturnData = {
      invoiceId: invoice.id,
      returns: [
        {
          productId: 'invalid-product-id',
          quantity: 1,
          returnStatus: 'GOOD'
        }
      ]
    }

    const validationResponse = await fetch('http://localhost:3000/api/product-returns', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'Cookie': 'session=test-session'
      },
      body: JSON.stringify(invalidReturnData)
    })

    if (!validationResponse.ok) {
      console.log('‚úÖ Validation fonctionne - retour invalide rejet√©')
    } else {
      console.log('‚ö†Ô∏è Validation √©chou√©e - retour invalide accept√©')
    }

    console.log('\nüéâ === TEST SYST√àME DE RETOUR TERMIN√â ===')
    console.log('‚úÖ Fonctionnalit√©s test√©es:')
    console.log('   - Cr√©ation facture d\'avoir avec retours')
    console.log('   - Traitement automatique des 3 types de retours')
    console.log('   - Mise √† jour automatique des stocks')
    console.log('   - R√©cup√©ration des retours via API')
    console.log('   - Validation des donn√©es de retour')

  } catch (error) {
    console.error('‚ùå Erreur lors du test:', error)
  }
}

// Ex√©cuter le test
testReturnSystem()
