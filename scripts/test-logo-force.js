// Script pour forcer un logo de test dans le bon de livraison
// √Ä ex√©cuter dans la console du navigateur

console.log('üß™ FORCE LOGO TEST - D√©marrage...')

// URL d'un logo de test (logo public accessible)
const TEST_LOGO_URL = 'https://via.placeholder.com/200x200/2563EB/FFFFFF?text=LOGO'

// Fonction pour forcer la mise √† jour des param√®tres avec un logo de test
async function forceTestLogo() {
  console.log('üîß For√ßage d\'un logo de test...')
  
  try {
    // 1. R√©cup√©rer les param√®tres actuels
    const currentResponse = await fetch('/api/settings/company')
    const currentSettings = await currentResponse.json()
    
    console.log('üìã Param√®tres actuels:', {
      name: currentSettings.companyName,
      logo: currentSettings.companyLogo
    })
    
    // 2. Mettre √† jour avec le logo de test
    const updateResponse = await fetch('/api/settings/company', {
      method: 'PUT',
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({
        ...currentSettings,
        companyLogo: TEST_LOGO_URL
      })
    })
    
    if (updateResponse.ok) {
      const updatedSettings = await updateResponse.json()
      console.log('‚úÖ Logo de test configur√©:', TEST_LOGO_URL)
      console.log('üìã Nouveaux param√®tres:', updatedSettings)
      return true
    } else {
      console.error('‚ùå Erreur lors de la mise √† jour:', updateResponse.status)
      return false
    }
  } catch (error) {
    console.error('‚ùå Erreur:', error)
    return false
  }
}

// Fonction pour restaurer les param√®tres originaux
async function restoreOriginalSettings(originalLogo = null) {
  console.log('üîÑ Restauration des param√®tres originaux...')
  
  try {
    const currentResponse = await fetch('/api/settings/company')
    const currentSettings = await currentResponse.json()
    
    const updateResponse = await fetch('/api/settings/company', {
      method: 'PUT',
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({
        ...currentSettings,
        companyLogo: originalLogo
      })
    })
    
    if (updateResponse.ok) {
      console.log('‚úÖ Param√®tres originaux restaur√©s')
      return true
    } else {
      console.error('‚ùå Erreur lors de la restauration:', updateResponse.status)
      return false
    }
  } catch (error) {
    console.error('‚ùå Erreur:', error)
    return false
  }
}

// Fonction pour tester la g√©n√©ration avec le logo forc√©
async function testWithForcedLogo() {
  console.log('üß™ Test avec logo forc√©...')
  
  // 1. Sauvegarder les param√®tres actuels
  const currentResponse = await fetch('/api/settings/company')
  const currentSettings = await currentResponse.json()
  const originalLogo = currentSettings.companyLogo
  
  console.log('üíæ Logo original sauvegard√©:', originalLogo)
  
  try {
    // 2. Forcer le logo de test
    const forced = await forceTestLogo()
    if (!forced) {
      console.error('‚ùå Impossible de forcer le logo de test')
      return
    }
    
    // 3. Attendre un peu pour que les changements soient pris en compte
    console.log('‚è±Ô∏è Attente de 2 secondes...')
    await new Promise(resolve => setTimeout(resolve, 2000))
    
    // 4. Intercepter la g√©n√©ration
    console.log('üéØ Interception de la prochaine g√©n√©ration...')
    const originalFetch = window.fetch
    
    window.fetch = async function(...args) {
      const [url, options] = args
      
      if (url.includes('/delivery-note')) {
        console.log('üöö G√©n√©ration avec logo forc√© d√©tect√©e!')
        
        try {
          const response = await originalFetch(...args)
          
          if (response.ok) {
            console.log('‚úÖ G√©n√©ration r√©ussie avec logo forc√©')
            
            // T√©l√©charger et analyser le PDF
            const blob = await response.clone().blob()
            console.log('üìÑ PDF g√©n√©r√©, taille:', blob.size, 'bytes')
            
            // Cr√©er un lien de t√©l√©chargement pour inspection manuelle
            const url = window.URL.createObjectURL(blob)
            const link = document.createElement('a')
            link.href = url
            link.download = 'test-logo-force.pdf'
            document.body.appendChild(link)
            link.click()
            document.body.removeChild(link)
            window.URL.revokeObjectURL(url)
            
            console.log('üì• PDF t√©l√©charg√© pour inspection manuelle')
          } else {
            console.error('‚ùå Erreur g√©n√©ration:', response.status)
          }
          
          return response
        } finally {
          // Restaurer le fetch et les param√®tres
          window.fetch = originalFetch
          
          setTimeout(async () => {
            await restoreOriginalSettings(originalLogo)
            console.log('üîÑ Test termin√©, param√®tres restaur√©s')
          }, 1000)
        }
      }
      
      return originalFetch(...args)
    }
    
    console.log('‚úÖ Interception activ√©e')
    console.log('üéØ G√©n√©rez maintenant un bon de livraison pour tester')
    console.log('üì• Le PDF sera automatiquement t√©l√©charg√© pour inspection')
    
  } catch (error) {
    console.error('‚ùå Erreur lors du test:', error)
    // Restaurer en cas d'erreur
    await restoreOriginalSettings(originalLogo)
  }
}

// Fonction pour cr√©er un logo de test en base64
function createTestLogoBase64() {
  console.log('üé® Cr√©ation d\'un logo de test en base64...')
  
  // Cr√©er un canvas avec un logo simple
  const canvas = document.createElement('canvas')
  canvas.width = 200
  canvas.height = 200
  const ctx = canvas.getContext('2d')
  
  // Fond bleu
  ctx.fillStyle = '#2563EB'
  ctx.fillRect(0, 0, 200, 200)
  
  // Cercle blanc
  ctx.fillStyle = '#FFFFFF'
  ctx.beginPath()
  ctx.arc(100, 100, 80, 0, 2 * Math.PI)
  ctx.fill()
  
  // Texte
  ctx.fillStyle = '#2563EB'
  ctx.font = 'bold 40px Arial'
  ctx.textAlign = 'center'
  ctx.fillText('LOGO', 100, 110)
  
  // Convertir en base64
  const base64 = canvas.toDataURL('image/png')
  console.log('‚úÖ Logo base64 cr√©√©, taille:', base64.length, 'caract√®res')
  
  return base64
}

// Fonction pour tester avec un logo base64
async function testWithBase64Logo() {
  console.log('üß™ Test avec logo base64...')
  
  const base64Logo = createTestLogoBase64()
  
  // Sauvegarder les param√®tres actuels
  const currentResponse = await fetch('/api/settings/company')
  const currentSettings = await currentResponse.json()
  const originalLogo = currentSettings.companyLogo
  
  try {
    // Mettre √† jour avec le logo base64
    const updateResponse = await fetch('/api/settings/company', {
      method: 'PUT',
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({
        ...currentSettings,
        companyLogo: base64Logo
      })
    })
    
    if (updateResponse.ok) {
      console.log('‚úÖ Logo base64 configur√©')
      console.log('üéØ G√©n√©rez un bon de livraison pour tester')
      
      // Programmer la restauration
      setTimeout(async () => {
        await restoreOriginalSettings(originalLogo)
        console.log('üîÑ Param√®tres restaur√©s apr√®s test base64')
      }, 30000) // 30 secondes
      
    } else {
      console.error('‚ùå Erreur lors de la configuration base64')
    }
  } catch (error) {
    console.error('‚ùå Erreur:', error)
    await restoreOriginalSettings(originalLogo)
  }
}

// Rendre les fonctions disponibles globalement
window.forceTestLogo = forceTestLogo
window.testWithForcedLogo = testWithForcedLogo
window.testWithBase64Logo = testWithBase64Logo
window.restoreOriginalSettings = restoreOriginalSettings

console.log('‚úÖ Script de test forc√© charg√©!')
console.log('\nüéØ Fonctions disponibles:')
console.log('- testWithForcedLogo() - Test avec logo URL forc√©')
console.log('- testWithBase64Logo() - Test avec logo base64')
console.log('- forceTestLogo() - Forcer logo de test')
console.log('- restoreOriginalSettings() - Restaurer param√®tres')

console.log('\nüí° UTILISATION:')
console.log('1. testWithForcedLogo() - Lance un test complet avec logo forc√©')
console.log('2. G√©n√©rez un bon de livraison quand demand√©')
console.log('3. Le PDF sera t√©l√©charg√© automatiquement')
console.log('4. Les param√®tres seront restaur√©s automatiquement')

console.log('\nüîó Logo de test utilis√©:', TEST_LOGO_URL)
