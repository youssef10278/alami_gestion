const { PrismaClient } = require('@prisma/client')

const prisma = new PrismaClient()

async function main() {
  console.log('üöÄ D√©but de la migration Railway...')

  try {
    // √âtape 1 : Ajouter la colonne paymentMethod
    console.log('üìù Ajout de la colonne paymentMethod...')
    await prisma.$executeRawUnsafe(`
      ALTER TABLE "CreditPayment" 
      ADD COLUMN IF NOT EXISTS "paymentMethod" TEXT NOT NULL DEFAULT 'CASH';
    `)
    console.log('‚úÖ Colonne paymentMethod ajout√©e')

    // √âtape 2 : Supprimer la contrainte de cl√© √©trang√®re
    console.log('üìù Suppression de la contrainte de cl√© √©trang√®re...')
    await prisma.$executeRawUnsafe(`
      ALTER TABLE "CreditPayment" 
      DROP CONSTRAINT IF EXISTS "CreditPayment_saleId_fkey";
    `)
    console.log('‚úÖ Contrainte supprim√©e')

    // √âtape 3 : Rendre saleId nullable
    console.log('üìù Modification de saleId pour le rendre nullable...')
    await prisma.$executeRawUnsafe(`
      ALTER TABLE "CreditPayment" 
      ALTER COLUMN "saleId" DROP NOT NULL;
    `)
    console.log('‚úÖ saleId est maintenant nullable')

    // √âtape 4 : Recr√©er la contrainte de cl√© √©trang√®re
    console.log('üìù Recr√©ation de la contrainte de cl√© √©trang√®re...')
    await prisma.$executeRawUnsafe(`
      ALTER TABLE "CreditPayment" 
      ADD CONSTRAINT "CreditPayment_saleId_fkey" 
      FOREIGN KEY ("saleId") REFERENCES "Sale"("id") 
      ON DELETE RESTRICT ON UPDATE CASCADE;
    `)
    console.log('‚úÖ Contrainte recr√©√©e')

    console.log('üéâ Migration termin√©e avec succ√®s !')
  } catch (error) {
    console.error('‚ùå Erreur lors de la migration:', error)
    process.exit(1)
  } finally {
    await prisma.$disconnect()
  }
}

main()

