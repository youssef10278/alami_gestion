const { PrismaClient } = require('@prisma/client');

const prisma = new PrismaClient();

async function debugSpecificProduct() {
  console.log('üîç D√âBOGAGE DU PRODUIT SP√âCIFIQUE\n');

  const productId = 'cmgnkrsmv0001mo014p5zsd6m';
  
  try {
    console.log(`üéØ Recherche du produit ID: ${productId}`);

    // 1. Recherche directe par ID
    console.log('\n1Ô∏è‚É£ Recherche directe par ID');
    
    const product = await prisma.product.findUnique({
      where: { id: productId },
      include: {
        category: true,
        saleItems: {
          include: {
            sale: true
          }
        }
      }
    });

    if (product) {
      console.log('‚úÖ PRODUIT TROUV√â:');
      console.log(`   Nom: ${product.name}`);
      console.log(`   SKU: ${product.sku}`);
      console.log(`   Prix: ${product.price} DH`);
      console.log(`   Stock: ${product.stock}`);
      console.log(`   Actif: ${product.isActive}`);
      console.log(`   Cr√©√© le: ${product.createdAt}`);
      console.log(`   Cat√©gorie: ${product.category?.name || 'Aucune'}`);
      console.log(`   Ventes associ√©es: ${product.saleItems?.length || 0}`);
      
      if (product.saleItems && product.saleItems.length > 0) {
        console.log('\nüìä VENTES ASSOCI√âES:');
        product.saleItems.forEach((item, index) => {
          console.log(`   ${index + 1}. Vente du ${item.sale.createdAt.toLocaleDateString()}`);
          console.log(`      Quantit√©: ${item.quantity}`);
          console.log(`      Total: ${item.total} DH`);
        });
      }
    } else {
      console.log('‚ùå PRODUIT NON TROUV√â');
      
      // 2. Recherche dans les produits supprim√©s r√©cemment
      console.log('\n2Ô∏è‚É£ Recherche dans les produits inactifs r√©cents');
      
      const recentInactiveProducts = await prisma.product.findMany({
        where: {
          isActive: false,
          updatedAt: {
            gte: new Date(Date.now() - 7 * 24 * 60 * 60 * 1000) // 7 derniers jours
          }
        },
        orderBy: {
          updatedAt: 'desc'
        },
        take: 10
      });

      console.log(`üìä Produits inactifs r√©cents: ${recentInactiveProducts.length}`);
      
      recentInactiveProducts.forEach((p, index) => {
        console.log(`   ${index + 1}. ${p.name} (${p.sku})`);
        console.log(`      ID: ${p.id}`);
        console.log(`      Supprim√© le: ${p.updatedAt.toLocaleString()}`);
      });

      // 3. Recherche par pattern d'ID similaire
      console.log('\n3Ô∏è‚É£ Recherche par pattern d\'ID similaire');
      
      const idPrefix = productId.substring(0, 10); // Prendre les 10 premiers caract√®res
      
      const similarProducts = await prisma.product.findMany({
        where: {
          id: {
            startsWith: idPrefix
          }
        },
        take: 5
      });

      console.log(`üìä Produits avec ID similaire (${idPrefix}*): ${similarProducts.length}`);
      
      similarProducts.forEach((p, index) => {
        console.log(`   ${index + 1}. ${p.name} (${p.sku})`);
        console.log(`      ID: ${p.id}`);
        console.log(`      Actif: ${p.isActive}`);
      });
    }

    // 4. V√©rifier s'il y a des r√©f√©rences orphelines dans les ventes
    console.log('\n4Ô∏è‚É£ V√©rification des r√©f√©rences orphelines');
    
    const orphanSaleItems = await prisma.saleItem.findMany({
      where: {
        productId: productId
      },
      include: {
        sale: true
      }
    });

    if (orphanSaleItems.length > 0) {
      console.log(`‚ö†Ô∏è R√âF√âRENCES ORPHELINES TROUV√âES: ${orphanSaleItems.length}`);
      console.log('   Le produit a √©t√© supprim√© mais des ventes y font encore r√©f√©rence');
      
      orphanSaleItems.forEach((item, index) => {
        console.log(`   ${index + 1}. Vente du ${item.sale.createdAt.toLocaleDateString()}`);
        console.log(`      Quantit√©: ${item.quantity}`);
        console.log(`      Total: ${item.total} DH`);
      });
    } else {
      console.log('‚úÖ Aucune r√©f√©rence orpheline trouv√©e');
    }

    // 5. Statistiques g√©n√©rales
    console.log('\n5Ô∏è‚É£ Statistiques g√©n√©rales');
    
    const totalProducts = await prisma.product.count();
    const activeProducts = await prisma.product.count({
      where: { isActive: true }
    });
    const inactiveProducts = await prisma.product.count({
      where: { isActive: false }
    });

    console.log(`üìä Total produits: ${totalProducts}`);
    console.log(`üìä Produits actifs: ${activeProducts}`);
    console.log(`üìä Produits inactifs: ${inactiveProducts}`);

    // 6. Recommandations
    console.log('\n6Ô∏è‚É£ RECOMMANDATIONS');
    
    if (!product && orphanSaleItems.length === 0) {
      console.log('üîß SOLUTION RECOMMAND√âE:');
      console.log('   1. Le produit n\'existe plus dans la base de donn√©es');
      console.log('   2. Rafra√Æchir la page des produits pour mettre √† jour la liste');
      console.log('   3. V√©rifier que l\'ID affich√© dans l\'interface est correct');
    } else if (!product && orphanSaleItems.length > 0) {
      console.log('üîß SOLUTION RECOMMAND√âE:');
      console.log('   1. Le produit a √©t√© supprim√© mais des ventes y font r√©f√©rence');
      console.log('   2. Nettoyer les r√©f√©rences orphelines ou restaurer le produit');
    } else if (product && !product.isActive) {
      console.log('üîß SOLUTION RECOMMAND√âE:');
      console.log('   1. Le produit existe mais est d√©j√† inactif');
      console.log('   2. Rafra√Æchir la page pour mettre √† jour l\'√©tat');
    }

  } catch (error) {
    console.error('‚ùå Erreur lors du d√©bogage:', error);
  } finally {
    await prisma.$disconnect();
  }
}

debugSpecificProduct();
