#!/usr/bin/env node

/**
 * Script de test pour tester l'API de g√©n√©ration de bon de livraison
 * et v√©rifier que le logo s'affiche correctement
 */

const fs = require('fs')
const path = require('path')

async function testDeliveryNoteAPI() {
  console.log('üß™ Test de l\'API de g√©n√©ration de bon de livraison')
  console.log('=' .repeat(60))

  try {
    // 1. Tester l'API de r√©cup√©ration des param√®tres
    console.log('üìã 1. Test de l\'API des param√®tres d\'entreprise...')
    
    const settingsResponse = await fetch('http://localhost:3000/api/settings/company')
    if (!settingsResponse.ok) {
      throw new Error(`Erreur API param√®tres: ${settingsResponse.status}`)
    }
    
    const settings = await settingsResponse.json()
    console.log('‚úÖ Param√®tres r√©cup√©r√©s:', {
      name: settings.companyName,
      hasLogo: !!settings.companyLogo,
      logoUrl: settings.companyLogo,
      address: settings.companyAddress,
      phone: settings.companyPhone,
      email: settings.companyEmail
    })

    // 2. Tester l'API de r√©cup√©ration des ventes
    console.log('\nüì¶ 2. Test de l\'API des ventes...')
    
    const salesResponse = await fetch('http://localhost:3000/api/sales?limit=1')
    if (!salesResponse.ok) {
      throw new Error(`Erreur API ventes: ${salesResponse.status}`)
    }
    
    const salesData = await salesResponse.json()
    const sales = salesData.sales || []
    
    if (sales.length === 0) {
      console.log('‚ö†Ô∏è Aucune vente trouv√©e, impossible de tester la g√©n√©ration')
      return
    }
    
    const testSale = sales[0]
    console.log('‚úÖ Vente trouv√©e:', {
      id: testSale.id,
      saleNumber: testSale.saleNumber,
      status: testSale.status,
      itemsCount: testSale.items?.length || 0
    })

    // 3. Tester la g√©n√©ration du bon de livraison
    console.log('\nüìÑ 3. Test de g√©n√©ration du bon de livraison...')
    
    const deliveryNoteResponse = await fetch(`http://localhost:3000/api/sales/${testSale.id}/delivery-note`)
    if (!deliveryNoteResponse.ok) {
      const errorText = await deliveryNoteResponse.text()
      throw new Error(`Erreur g√©n√©ration bon de livraison: ${deliveryNoteResponse.status} - ${errorText}`)
    }
    
    const pdfBuffer = await deliveryNoteResponse.arrayBuffer()
    console.log('‚úÖ Bon de livraison g√©n√©r√© avec succ√®s, taille:', pdfBuffer.byteLength, 'bytes')

    // 4. Sauvegarder le PDF pour inspection
    const outputDir = path.join(__dirname, '..', 'test-outputs')
    if (!fs.existsSync(outputDir)) {
      fs.mkdirSync(outputDir, { recursive: true })
    }

    const outputPath = path.join(outputDir, `delivery-note-api-test-${Date.now()}.pdf`)
    fs.writeFileSync(outputPath, Buffer.from(pdfBuffer))
    console.log('üíæ PDF sauvegard√©:', outputPath)

    // 5. R√©sum√© du test
    console.log('\nüìä 4. R√©sum√© du test API:')
    console.log('=' .repeat(40))
    console.log(`‚úÖ Param√®tres entreprise: ${settings.companyName}`)
    console.log(`‚úÖ Logo configur√©: ${settings.companyLogo ? 'OUI' : 'NON'}`)
    console.log(`‚úÖ Vente test√©e: ${testSale.saleNumber}`)
    console.log(`‚úÖ PDF g√©n√©r√©: ${pdfBuffer.byteLength} bytes`)
    console.log(`‚úÖ Fichier sauvegard√©: ${outputPath}`)
    
    if (settings.companyLogo) {
      console.log('\nüéØ V√©rifiez le fichier PDF pour confirmer que le logo s\'affiche correctement!')
      console.log(`üîó URL du logo: ${settings.companyLogo}`)
    } else {
      console.log('\n‚ö†Ô∏è Aucun logo configur√© - le PDF devrait afficher un cercle avec initiale')
      console.log('üí° Pour tester avec un logo, ajoutez-en un dans les param√®tres de l\'entreprise')
    }

  } catch (error) {
    console.error('‚ùå Erreur lors du test API:', error)
    console.error('Stack trace:', error.stack)
    
    if (error.message.includes('ECONNREFUSED')) {
      console.log('\nüí° Assurez-vous que le serveur de d√©veloppement est d√©marr√©:')
      console.log('   npm run dev')
    }
  }
}

// Ex√©cuter le test
testDeliveryNoteAPI()
  .then(() => {
    console.log('\n‚úÖ Test API termin√©')
    process.exit(0)
  })
  .catch((error) => {
    console.error('‚ùå Test API √©chou√©:', error)
    process.exit(1)
  })
