#!/usr/bin/env node

console.log('🔍 DIAGNOSTIC AVANCÉ - ERREUR 500 PERSISTANTE')
console.log('')

console.log('❌ PROBLÈME : Erreur 500 persiste malgré configuration PostgreSQL')
console.log('')

console.log('🎯 VÉRIFICATIONS À EFFECTUER :')
console.log('')

console.log('1️⃣ VÉRIFIER VARIABLES D\'ENVIRONNEMENT :')
console.log('   🌐 Railway Dashboard → Votre projet')
console.log('   ⚙️ Service APPLICATION → Onglet "Variables"')
console.log('')
console.log('   ✅ Variables requises :')
console.log('   • DATABASE_URL (doit être présente)')
console.log('   • JWT_SECRET (votre clé générée)')
console.log('   • NODE_ENV = production')
console.log('   • NEXT_PUBLIC_APP_URL = https://alamigestion-production.up.railway.app')
console.log('')

console.log('2️⃣ VÉRIFIER STATUS POSTGRESQL :')
console.log('   🗄️ Service PostgreSQL → Status')
console.log('   ✅ Doit être "Running" (vert)')
console.log('   ✅ Pas d\'erreurs dans les logs')
console.log('')

console.log('3️⃣ TESTER CONNEXION BASE DE DONNÉES :')
console.log('   🌐 https://alamigestion-production.up.railway.app/api/health')
console.log('   ✅ Réponse attendue : {"status":"healthy","database":"connected"}')
console.log('   ❌ Si erreur : problème de connexion DB')
console.log('')

console.log('4️⃣ VÉRIFIER LOGS DE DÉPLOIEMENT :')
console.log('   📊 Service APPLICATION → Onglet "Deployments"')
console.log('   🔍 Dernier déploiement → "View Logs"')
console.log('')
console.log('   🔍 Rechercher ces messages :')
console.log('   ✅ "Prisma schema loaded"')
console.log('   ✅ "Generated Prisma Client"')
console.log('   ✅ "Compiled successfully"')
console.log('   ❌ "Environment variable not found: DATABASE_URL"')
console.log('   ❌ "PrismaClientInitializationError"')
console.log('')

console.log('5️⃣ CAUSES POSSIBLES ERREUR 500 :')
console.log('')

console.log('   🗄️ PROBLÈME DATABASE_URL :')
console.log('   • Variable DATABASE_URL absente')
console.log('   • Format DATABASE_URL incorrect')
console.log('   • PostgreSQL non démarré')
console.log('   • Connexion réseau bloquée')
console.log('')

console.log('   🔧 PROBLÈME PRISMA :')
console.log('   • Schema Prisma non trouvé')
console.log('   • Client Prisma non généré')
console.log('   • Migrations non appliquées')
console.log('   • Version Prisma incompatible')
console.log('')

console.log('   📝 PROBLÈME API SIGNUP :')
console.log('   • Erreur validation Zod')
console.log('   • Erreur hashage bcrypt')
console.log('   • Contrainte unique violée')
console.log('   • Timeout base de données')
console.log('')

console.log('6️⃣ SOLUTIONS PAR PROBLÈME :')
console.log('')

console.log('   🔧 SI DATABASE_URL MANQUE :')
console.log('   • Redémarrer service PostgreSQL')
console.log('   • Redémarrer service APPLICATION')
console.log('   • Vérifier connexions entre services')
console.log('   • Ajouter DATABASE_URL manuellement si nécessaire')
console.log('')

console.log('   🔧 SI PRISMA ÉCHOUE :')
console.log('   • Forcer nouveau déploiement')
console.log('   • Vérifier prisma/schema.prisma')
console.log('   • Exécuter : npx prisma generate')
console.log('   • Exécuter : npx prisma db push')
console.log('')

console.log('   🔧 SI API SIGNUP ÉCHOUE :')
console.log('   • Tester avec données simples')
console.log('   • Vérifier logs erreur détaillés')
console.log('   • Tester connexion DB directe')
console.log('   • Vérifier schéma User en DB')
console.log('')

console.log('7️⃣ TESTS DE DIAGNOSTIC :')
console.log('')

console.log('   🧪 TEST 1 - Health Check :')
console.log('   curl https://alamigestion-production.up.railway.app/api/health')
console.log('   → Si erreur : problème DB')
console.log('')

console.log('   🧪 TEST 2 - Données minimales :')
console.log('   POST /api/auth/signup')
console.log('   {')
console.log('     "name": "Test User",')
console.log('     "email": "test@test.com",')
console.log('     "password": "123456"')
console.log('   }')
console.log('')

console.log('   🧪 TEST 3 - Console Railway :')
console.log('   • Ouvrir console Railway')
console.log('   • npx prisma studio')
console.log('   • Vérifier tables créées')
console.log('')

console.log('8️⃣ ACTIONS DE RÉCUPÉRATION :')
console.log('')

console.log('   🔄 REDÉMARRAGE COMPLET :')
console.log('   1. Arrêter service APPLICATION')
console.log('   2. Arrêter service PostgreSQL')
console.log('   3. Redémarrer PostgreSQL')
console.log('   4. Attendre 2 minutes')
console.log('   5. Redémarrer APPLICATION')
console.log('   6. Attendre redéploiement')
console.log('')

console.log('   🔄 MIGRATION FORCÉE :')
console.log('   1. Console Railway')
console.log('   2. npx prisma migrate reset --force')
console.log('   3. npx prisma migrate deploy')
console.log('   4. npx prisma generate')
console.log('')

console.log('   🔄 VARIABLES MANUELLES :')
console.log('   Si DATABASE_URL n\'apparaît pas automatiquement :')
console.log('   • Copier DATABASE_URL depuis PostgreSQL')
console.log('   • Ajouter manuellement dans APPLICATION')
console.log('   • Format : postgresql://user:pass@host:port/db')
console.log('')

console.log('9️⃣ INFORMATIONS À COLLECTER :')
console.log('')

console.log('   📊 POUR DIAGNOSTIC :')
console.log('   • Status des 2 services (APP + DB)')
console.log('   • Liste complète variables APPLICATION')
console.log('   • Logs déploiement (dernières 50 lignes)')
console.log('   • Réponse /api/health')
console.log('   • Message erreur exact console navigateur')
console.log('')

console.log('🔟 ESCALADE SI PROBLÈME PERSISTE :')
console.log('')

console.log('   🆘 SUPPORT RAILWAY :')
console.log('   • https://help.railway.app')
console.log('   • Discord Railway')
console.log('   • Fournir logs complets')
console.log('')

console.log('   🔧 SOLUTION ALTERNATIVE :')
console.log('   • Supprimer et recréer PostgreSQL')
console.log('   • Utiliser base externe (Supabase, etc.)')
console.log('   • Déployer sur autre plateforme')
console.log('')

console.log('💡 PROCHAINES ÉTAPES RECOMMANDÉES :')
console.log('')

console.log('   1. 🔍 Vérifiez /api/health en premier')
console.log('   2. 📊 Collectez logs déploiement')
console.log('   3. ⚙️ Vérifiez toutes variables')
console.log('   4. 🔄 Redémarrez services si nécessaire')
console.log('   5. 🧪 Testez avec données simples')
console.log('')

console.log('🎯 OBJECTIF :')
console.log('   Identifier la cause exacte de l\'erreur 500')
console.log('   pour appliquer la solution appropriée')
console.log('')

console.log('📞 BESOIN D\'AIDE :')
console.log('   Partagez les résultats de ces vérifications')
console.log('   pour un diagnostic plus précis !')
