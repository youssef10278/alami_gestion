// Script de d√©bogage sp√©cialis√© pour le logo du bon de livraison
// √Ä ex√©cuter dans la console du navigateur

console.log('üîç D√âBOGAGE LOGO BON DE LIVRAISON - D√©marrage...')

// Fonction pour tester l'API des param√®tres
async function testCompanySettingsAPI() {
  console.log('\n1Ô∏è‚É£ Test de l\'API des param√®tres de l\'entreprise...')
  
  try {
    const response = await fetch('/api/settings/company')
    console.log('üì° R√©ponse API:', {
      status: response.status,
      statusText: response.statusText,
      ok: response.ok
    })
    
    if (response.ok) {
      const data = await response.json()
      console.log('‚úÖ Donn√©es r√©cup√©r√©es:')
      console.log('  üìõ Nom:', data.companyName)
      console.log('  üñºÔ∏è Logo:', data.companyLogo)
      console.log('  üìç Adresse:', data.companyAddress)
      console.log('  üìû T√©l√©phone:', data.companyPhone)
      console.log('  üìß Email:', data.companyEmail)
      
      if (data.companyLogo) {
        console.log('  üîó URL compl√®te du logo:', data.companyLogo)
        
        // Tester l'accessibilit√© du logo
        try {
          const logoResponse = await fetch(data.companyLogo)
          console.log('  üì° Test d\'acc√®s au logo:', {
            status: logoResponse.status,
            ok: logoResponse.ok,
            contentType: logoResponse.headers.get('content-type'),
            contentLength: logoResponse.headers.get('content-length')
          })
          
          if (logoResponse.ok) {
            console.log('  ‚úÖ Logo accessible')
          } else {
            console.error('  ‚ùå Logo non accessible:', logoResponse.status)
          }
        } catch (logoError) {
          console.error('  ‚ùå Erreur lors du test du logo:', logoError)
        }
      } else {
        console.warn('  ‚ö†Ô∏è Aucun logo configur√© dans les param√®tres')
      }
      
      return data
    } else {
      console.error('‚ùå Erreur API:', response.status, response.statusText)
      return null
    }
  } catch (error) {
    console.error('‚ùå Erreur lors du test de l\'API:', error)
    return null
  }
}

// Fonction pour intercepter et analyser la g√©n√©ration du bon de livraison
async function interceptDeliveryNoteGeneration() {
  console.log('\n2Ô∏è‚É£ Interception de la g√©n√©ration du bon de livraison...')
  
  // Sauvegarder le fetch original
  const originalFetch = window.fetch
  
  // Intercepter les appels fetch
  window.fetch = async function(...args) {
    const [url, options] = args
    
    // D√©tecter les appels vers l'API de bon de livraison
    if (url.includes('/delivery-note')) {
      console.log('üöö Appel API bon de livraison d√©tect√©:', url)
      console.log('üìã Options:', options)
      
      try {
        const response = await originalFetch(...args)
        
        console.log('üì° R√©ponse API bon de livraison:', {
          status: response.status,
          statusText: response.statusText,
          ok: response.ok,
          contentType: response.headers.get('content-type'),
          contentLength: response.headers.get('content-length')
        })
        
        if (response.ok) {
          console.log('‚úÖ Bon de livraison g√©n√©r√© avec succ√®s')
          
          // Cloner la r√©ponse pour pouvoir la lire
          const responseClone = response.clone()
          const arrayBuffer = await responseClone.arrayBuffer()
          console.log('üìÑ Taille du PDF:', arrayBuffer.byteLength, 'bytes')
          
          if (arrayBuffer.byteLength > 0) {
            console.log('‚úÖ PDF non vide g√©n√©r√©')
          } else {
            console.warn('‚ö†Ô∏è PDF vide g√©n√©r√©')
          }
        } else {
          console.error('‚ùå Erreur lors de la g√©n√©ration:', response.status)
          const errorText = await response.text()
          console.error('‚ùå D√©tails de l\'erreur:', errorText)
        }
        
        return response
      } catch (error) {
        console.error('‚ùå Erreur lors de l\'appel API:', error)
        throw error
      } finally {
        // Restaurer le fetch original apr√®s un d√©lai
        setTimeout(() => {
          window.fetch = originalFetch
          console.log('üîÑ Fetch original restaur√©')
        }, 5000)
      }
    }
    
    return originalFetch(...args)
  }
  
  console.log('‚úÖ Interception activ√©e. G√©n√©rez un bon de livraison maintenant.')
  console.log('‚è±Ô∏è L\'interception sera d√©sactiv√©e dans 5 secondes apr√®s la premi√®re g√©n√©ration.')
}

// Fonction pour v√©rifier les logs c√¥t√© serveur (simulation)
function checkServerLogs() {
  console.log('\n3Ô∏è‚É£ Instructions pour v√©rifier les logs c√¥t√© serveur...')
  console.log('üìã Ouvrez les logs du serveur et cherchez ces messages:')
  console.log('  üìÑ "D√©but g√©n√©ration PDF bon de livraison"')
  console.log('  üìã "Param√®tres r√©cup√©r√©s:"')
  console.log('  üè¢ "Informations entreprise mapp√©es:"')
  console.log('  üñºÔ∏è "Tentative d\'ajout du logo:"')
  console.log('  üì• "Chargement du logo depuis:"')
  console.log('  üåê "Tentative de fetch de l\'image:"')
  console.log('  üì° "R√©ponse fetch:"')
  console.log('  üì¶ "Blob cr√©√©:"')
  console.log('  ‚úÖ "Image convertie en base64"')
  console.log('  ‚úÖ "Logo ajout√© au PDF avec succ√®s"')
}

// Fonction pour tester manuellement le chargement d'image
async function testImageLoading(imageUrl) {
  console.log('\n4Ô∏è‚É£ Test manuel du chargement d\'image...')
  console.log('üîó URL test√©e:', imageUrl)
  
  try {
    // Test 1: Fetch simple
    console.log('üì° Test 1: Fetch simple...')
    const response = await fetch(imageUrl)
    console.log('  Status:', response.status)
    console.log('  OK:', response.ok)
    console.log('  Content-Type:', response.headers.get('content-type'))
    console.log('  Content-Length:', response.headers.get('content-length'))
    
    if (!response.ok) {
      console.error('  ‚ùå Fetch √©chou√©')
      return false
    }
    
    // Test 2: Conversion en blob
    console.log('üì¶ Test 2: Conversion en blob...')
    const blob = await response.blob()
    console.log('  Taille blob:', blob.size)
    console.log('  Type blob:', blob.type)
    
    // Test 3: Conversion en base64
    console.log('üîÑ Test 3: Conversion en base64...')
    const base64 = await new Promise((resolve, reject) => {
      const reader = new FileReader()
      reader.onload = () => resolve(reader.result)
      reader.onerror = reject
      reader.readAsDataURL(blob)
    })
    
    console.log('  ‚úÖ Base64 g√©n√©r√©, taille:', base64.length, 'caract√®res')
    console.log('  üéØ D√©but base64:', base64.substring(0, 50) + '...')
    
    return true
  } catch (error) {
    console.error('‚ùå Erreur lors du test:', error)
    return false
  }
}

// Fonction principale de diagnostic
async function runFullDiagnostic() {
  console.log('üöÄ DIAGNOSTIC COMPLET DU LOGO BON DE LIVRAISON\n')
  
  // 1. Tester l'API des param√®tres
  const settings = await testCompanySettingsAPI()
  
  // 2. Si un logo est configur√©, le tester
  if (settings && settings.companyLogo) {
    await testImageLoading(settings.companyLogo)
  }
  
  // 3. Activer l'interception
  interceptDeliveryNoteGeneration()
  
  // 4. Instructions pour les logs serveur
  checkServerLogs()
  
  console.log('\n‚úÖ Diagnostic termin√©!')
  console.log('\nüìã R√âSUM√â:')
  console.log('- Param√®tres r√©cup√©r√©s:', settings ? '‚úÖ' : '‚ùå')
  console.log('- Logo configur√©:', settings?.companyLogo ? '‚úÖ' : '‚ùå')
  console.log('- Interception activ√©e:', '‚úÖ')
  
  if (!settings?.companyLogo) {
    console.log('\nüí° SOLUTION:')
    console.log('1. Allez sur /dashboard/settings')
    console.log('2. Ajoutez un logo dans "Informations de l\'entreprise"')
    console.log('3. Sauvegardez les modifications')
    console.log('4. Retestez la g√©n√©ration du bon de livraison')
  } else {
    console.log('\nüéØ PROCHAINES √âTAPES:')
    console.log('1. G√©n√©rez un bon de livraison maintenant')
    console.log('2. Observez les logs dans cette console')
    console.log('3. V√©rifiez les logs du serveur')
    console.log('4. Si le probl√®me persiste, v√©rifiez l\'URL du logo')
  }
}

// Fonction pour tester avec une URL de logo sp√©cifique
async function testWithSpecificLogo(logoUrl) {
  console.log('\nüß™ Test avec URL sp√©cifique:', logoUrl)
  
  const success = await testImageLoading(logoUrl)
  
  if (success) {
    console.log('‚úÖ L\'URL fonctionne. Le probl√®me pourrait √™tre:')
    console.log('  - Mapping incorrect des champs dans le code')
    console.log('  - Probl√®me d\'async/await')
    console.log('  - Erreur silencieuse dans jsPDF')
  } else {
    console.log('‚ùå L\'URL ne fonctionne pas. V√©rifiez:')
    console.log('  - L\'URL est-elle correcte?')
    console.log('  - Le fichier existe-t-il?')
    console.log('  - Y a-t-il des restrictions CORS?')
  }
}

// Rendre les fonctions disponibles globalement
window.testCompanySettingsAPI = testCompanySettingsAPI
window.interceptDeliveryNoteGeneration = interceptDeliveryNoteGeneration
window.testImageLoading = testImageLoading
window.testWithSpecificLogo = testWithSpecificLogo
window.runFullDiagnostic = runFullDiagnostic

console.log('‚úÖ Script de d√©bogage charg√©!')
console.log('\nüéØ Fonctions disponibles:')
console.log('- runFullDiagnostic() - Diagnostic complet')
console.log('- testCompanySettingsAPI() - Test API param√®tres')
console.log('- testImageLoading(url) - Test chargement image')
console.log('- testWithSpecificLogo(url) - Test avec URL sp√©cifique')
console.log('- interceptDeliveryNoteGeneration() - Intercepter g√©n√©ration')

// Lancer le diagnostic automatiquement
runFullDiagnostic()
