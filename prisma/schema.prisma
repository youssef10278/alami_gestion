// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  OWNER
  SELLER
}

enum PaymentMethod {
  CASH
  CREDIT
  CARD
  TRANSFER
}

enum DocumentType {
  INVOICE
  QUOTE
  DELIVERY_NOTE
}

enum SaleStatus {
  PENDING
  COMPLETED
  CANCELLED
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String
  name      String
  role      UserRole @default(SELLER)
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  sales     Sale[]
  documents Document[]

  @@index([email])
  @@index([role])
}

model Category {
  id          String    @id @default(cuid())
  name        String
  description String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  products    Product[]

  @@index([name])
}

model Product {
  id            String   @id @default(cuid())
  sku           String   @unique
  name          String
  description   String?
  image         String?
  purchasePrice Decimal  @default(0) @db.Decimal(10, 2)
  price         Decimal  @db.Decimal(10, 2)
  stock         Int      @default(0)
  minStock      Int      @default(10)
  categoryId    String?
  isActive      Boolean  @default(true)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  category       Category?        @relation(fields: [categoryId], references: [id])
  saleItems      SaleItem[]
  stockMovements StockMovement[]

  @@index([sku])
  @@index([name])
  @@index([categoryId])
  @@index([stock])
}

model Customer {
  id           String   @id @default(cuid())
  name         String
  company      String?
  email        String?
  phone        String?
  address      String?
  creditLimit  Decimal  @default(0) @db.Decimal(10, 2)
  creditUsed   Decimal  @default(0) @db.Decimal(10, 2)
  isBlocked    Boolean  @default(false)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  sales        Sale[]
  creditPayments CreditPayment[]

  @@index([name])
  @@index([email])
  @@index([phone])
  @@index([isBlocked])
}

model Sale {
  id            String        @id @default(cuid())
  saleNumber    String        @unique
  customerId    String?       // Optionnel pour les clients de passage
  sellerId      String
  totalAmount   Decimal       @db.Decimal(10, 2)
  paidAmount    Decimal       @default(0) @db.Decimal(10, 2)
  creditAmount  Decimal       @default(0) @db.Decimal(10, 2)
  paymentMethod PaymentMethod
  status        SaleStatus    @default(PENDING)
  notes         String?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt

  customer      Customer?     @relation(fields: [customerId], references: [id])
  seller        User          @relation(fields: [sellerId], references: [id])
  items         SaleItem[]
  documents     Document[]
  creditPayments CreditPayment[]

  @@index([saleNumber])
  @@index([customerId])
  @@index([sellerId])
  @@index([createdAt])
  @@index([status])
}

model SaleItem {
  id        String   @id @default(cuid())
  saleId    String
  productId String
  quantity  Int
  unitPrice Decimal  @db.Decimal(10, 2)
  total     Decimal  @db.Decimal(10, 2)
  createdAt DateTime @default(now())

  sale    Sale    @relation(fields: [saleId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id])

  @@index([saleId])
  @@index([productId])
}

model StockMovement {
  id          String   @id @default(cuid())
  productId   String
  quantity    Int
  type        String // "IN" or "OUT"
  reason      String
  reference   String?
  createdAt   DateTime @default(now())

  product Product @relation(fields: [productId], references: [id])

  @@index([productId])
  @@index([createdAt])
  @@index([type])
}

model CreditPayment {
  id         String   @id @default(cuid())
  saleId     String
  customerId String
  amount     Decimal  @db.Decimal(10, 2)
  notes      String?
  createdAt  DateTime @default(now())

  sale     Sale     @relation(fields: [saleId], references: [id])
  customer Customer @relation(fields: [customerId], references: [id])

  @@index([saleId])
  @@index([customerId])
  @@index([createdAt])
}

model Document {
  id             String       @id @default(cuid())
  documentNumber String       @unique
  type           DocumentType
  saleId         String
  generatedBy    String
  pdfUrl         String?
  createdAt      DateTime     @default(now())

  sale      Sale @relation(fields: [saleId], references: [id])
  generator User @relation(fields: [generatedBy], references: [id])

  @@index([documentNumber])
  @@index([saleId])
  @@index([type])
  @@index([createdAt])
}

